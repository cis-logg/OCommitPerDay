기본적인 프로그램 실행 레지스터
    레지스터 : CPU 바로 안에 있는 고속 저장 장소
                 일반 메모리보다 훨씬 빠른 속도로 접근되도록 설계
                 
	8개의 범용 레지스터
	6개의 세그먼트 레지스터
	프로세서 상태 플래그 레지스터(EFLAGS)
	명령어 포인터(EIP)


	32bit	16bit	8bit(상위)	 8bit(하위)
	EAX	AX	AH	AL
	EBX	BX	BH	BL
	ECX	CX	CH	CL
	EDX	DX	DH	DL

	32bit	16bit
	ESI	SI
	EDI	DI
	EBP	BP
	ESP	SP

8개의 범용 레지스터
EAX	(extended accumulator, 확장 누산기) 곱셈과 나눗셈 명령어에서 자동으로 사용. 
EBX	
ECX	CPU가 루프 카운터로 자동으로 사용
EDX

EBP	(extended frame pointer, 확장 프레임 포인터) 고급언어에서 스택에 있는 함수 매개 변수와 지역 변수를 참조하기 위해 사용, 보통 계산과 데이터 전송에는 사용하지 않아야 한다.
ESP	(extended stack pointer, 확장 스택 포인터) (시스템 메모리 구조) 스택에 있는 데이터의 주소를 지정, 보통 계산과 데이터 전송에는 사용하지 않음. 
ESI	(extended source index, 확장 소스인덱스) 고속 메모리 전송 명령어에서 사용 
EDI	(extended destination index, 확장 목적지인덱스) 고속 메모리 전송 명령어에서 사용

6개의 세그먼트 레지스터
CS
SS
DS
ES
FS
GS

실제 주소 모드 : 16bit 세그먼트 레지스터는 [세그먼트]라고 하는 미리 할당된 메모리 영역의 시작 주소를 가리킨다. 
보호모드 : 세그먼트 레지스터는 세그먼트 서술자 테이블에 대한 포인터를 갖음.
	프로그램 명령어(코드) 저장
	변수(데이터) 저장
	함수의 지역 변수, 함수 매개 변수 저장

EIP	명령어 포인터 레지스터는 실행할 다음 명령어의 주소를 포함, 프로그램을 새 위치로 분기하게 함

EFLAGS	Flags는 CPU의 동작을 제어하거나 연산 결과를 반영하는 개별적인 2진수 bit로 구성
플래그는 1일 때에 set, 0일 때 clear 또는 reset

제어 플래그 : CPU의 동작을 제어한다.
	Direction : 방향 플래그
	Interrupt : 인터럽트 플래그

상태 플래그 : CPU가 수행하는 산술 논리 연산의 결과를 반영한다.
	CF, carry flag : 캐리 플래그 - 부호 없는 산술 연산의 결과가 커서 목적지에 저장할 수 없을 때 1로 설정
	OF, overflow flag : 오버플로우 플래그 - 부호 있는 산술 연산의 결과가 너무 크거나 작아서 목적지에 저장할 수 없을 때 1로 설정
	SF, sign flag : 부호 플래그 - 산술 논리 연산의 결과가 음수일 때 1로 설정
	ZF, zero flag : 제로 플래그 - 산술 논리 연산의 결과가 0일 때 1로 설정
	AC, auxiliary carry flag : 보조캐리 플래그 - 산술 연산이 8bit 피연산자에서 bit 3에서 bit 4로 캐리가 발생할 때에 1로 설정
	PF, parity flag : 패리티 플래그 - 결과의 하위 byte가 짝수 개의 1인 bit들을 포함한다면 1로 설정, 아니면 0으로 설정, 오류 검사에 사용

MMX 레지스터
8개의 64bit MMX 레지스터는 SIMD(Single-Instruction, Multiple-Data) 명령어들을 지원한다.
MMX 명령어는 MMX레지서테 저장된 데이터 값에 대해 병렬로 동작한다.
부동소수점 장치가 사용하는 레지스터의 별명이다.

XMM 레지스터
x86 구조는 XMM 레지스터라고 하는 8개의 128 bit 레지스터도 포함하고 있다.
명령어 집합의 스트리밍 SIMD 확장에서 사용한다.

